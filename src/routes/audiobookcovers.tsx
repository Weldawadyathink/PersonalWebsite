import { NavBar } from "@/components/NavBar";
import { Heading, P, A } from "@/components/General";
import { Separator } from "@/components/ui/separator";

export default function AudiobookCovers() {
  return (
    <>
      <NavBar />

      <div className="container max-w-2xl mx-auto p-6">
        <Heading className="text-center">
          <a href="https://audiobookcovers.com" target="_blank">
            AudiobookCovers.com
          </a>
        </Heading>
        <Separator className="my-6" />
        <P>
          As an avid audiobook enthusiast, I am often disappointed about the
          quality and designs of first-party audiobook covers. Lets take a look
          at the cover artwork for one of my favorite books: Dune, by Frank
          Herbert.
        </P>
        <img
          src="/images/dune_default.jpg"
          alt="Dune Audiobook Cover Artwork"
        />
        <P>
          This is a really good cover, for the post part. But there are quite a
          few issues. Audiobook covers are most often displayed as a small photo
          on a phone screen. Small text will be unreadable because of this.
          Therefore the "Read by..." line on this cover will never be legible. I
          do not want to dismiss the incredible work that Simon Vance and the
          rest of the full cast put into this incredible audiobook, but their
          credit in this cover image turns into a tiny white blur in the most
          common reading conditions.
        </P>
        <P>
          The much larger issue is the blatant advertisement for the Dune Part
          Two movie. Don't get me wrong, I love that movie, but I really don't
          need to be reminded about it every time I want to read the book. This
          isn't even the worst instance of ruined book covers I have seen.
          Audible in particular likes to put a large yellow banner across the
          bottom right of the cover.
        </P>
        <P>
          I am not the only one who has these opinions. The community at{" "}
          <A href="https://reddit.com/r/audiobookcovers">/r/audiobookcovers</A>{" "}
          has curated and created thousands of covers using various techniques.
          Some of the best is third party artwork. For example, Matt Griffin
          made an incredible{" "}
          <A href="https://www.mattgriffin.online/dune">
            deluxe hardcover edition of Dune
          </A>
          . <A href="https://reddit.com/u/Haldered">/u/Haldered</A> on reddit
          took this incredible artwork and made{" "}
          <A href="https://www.reddit.com/r/AudiobookCovers/comments/13mn6zb/dune_trilogy_frank_herbert_deluxe_matt_griffin/">
            a series of audiobook covers
          </A>
          . I love to explore these covers and apply them to my own audiobook
          player software, but the experience on Reddit is not conducive to this
          process.
        </P>
        <Heading level={3} className="mt-6">
          A New Solution
        </Heading>
        <P>
          I wanted a website that was designed from the ground up to archive and
          search for these fan made audiobook covers. Nobody else wanted to
          create this website, so I needed to build it myself. Since This was
          going to be a hobby project with no financial motivation, I had to
          design my website to use services efficiently to reduce hosting costs.
          One of the main motivations for this project was the release of
          Cloudflare R2, an S3 compatible object storage solution with 0 egress
          fees.
        </P>
        <P>
          I built many renditions of my website. I was new to website
          development, so I didn't know yet what technology to use. I started
          with bare, handwritten HTML, CSS, and JS. I quickly learned why
          frameworks exist and what I would want from a framework. I found the
          Nuxt + Vue combination to be suitable and started improving my
          website. The final website is a static site generated by Nuxt.
        </P>
        <P>
          Now I needed a backend. More specifically I needed a backend that
          enabled image search. My first iteration of search used Google's Cloud
          Vision API to run OCR on the saved images. I threw the OCR into a
          database and ran a simple search server on that data. This worked
          surprisingly well.
        </P>
        <P>
          With all the news about OpenAI and ChatGPT, I somehow had never heard
          about their work with AI and images. Somehow I stumbled on their CLIP
          AI model that can generate embeddings of images and text in the same
          vector space. Inspired by other similar projects, I set about adding
          CLIP based image search to my website. I had to index all the images
          with an embedding, and have a live server that could run the AI model
          on user queries. Throw this data into a self-hosted postgres and
          PGVector database, and there you go! AI powered image search! As an
          added bonus, this technology can also find similar images by comparing
          the embeddings, bringing a cool new feature to the website.
        </P>
        <Heading level={3}>Technology Used</Heading>
        <ul>
          <li>Javascript Express Server</li>
          <li>Python Flask Server (for running CLIP AI model)</li>
          <li>Postgres with PGVector</li>
          <li>VUE and NUXT Static Website</li>
          <li>Cloudflare R2</li>
          <li>Cloudflare Pages</li>
        </ul>
      </div>
    </>
  );
}
